{
	"id": "0d314be7-6067-c3ff-34a7-02adbd79a504",
	"owner": "920496",
	"name": "Asset Management",
	"description": "Asset Management CRUD Operations\n",
	"order": [
		"c9238d75-4852-564c-aa16-8236de9fa153",
		"737dedb8-bbd5-6218-7b55-2b97763dda1e",
		"7242ad41-bd6a-c277-1a74-6bd57ba2665c",
		"5d5c05e8-d015-9649-f5b4-2b0fe515b333",
		"1ff15e3b-a890-16b9-2091-b32d618f716c",
		"1f55b66d-2545-a2cb-0db6-ea962eb8c4c4",
		"61a3ad3a-37ba-ca6e-9faa-345efb4943f2",
		"0effa530-b115-969a-220a-55074d0ab1d1",
		"2aa51284-6f44-e819-564c-df240ef1ee2f",
		"d09377f4-89d9-e373-4130-a6d4719615f0",
		"f17b3859-91ad-bb97-a1ac-1500a41dcf7a",
		"890e4a4c-a845-0c0f-7950-ab7c350d91d0",
		"b7774e77-5900-75f9-acf6-2c77a3a9d70a",
		"3ba51c54-c6d9-e0f9-f981-e3ce030a0572",
		"2e614269-b230-eb00-340b-65f334fc5079",
		"03168e23-32a3-5c23-b0b1-b94bcfddcada",
		"426145ed-acf2-fa73-a8dc-d1ac8d9da14a",
		"ff7f4e5a-dfa3-db2b-1b50-4a1796e1ff95",
		"e829b3ac-78e7-2ba2-79ea-ea4a51d04564",
		"71ee918b-9cbf-0541-3d98-22e5d1c5e657",
		"4370d0c4-6f62-f32a-bf61-3b5dbb88864c",
		"6b666258-cc37-84cc-f364-0754ef1ed900",
		"48e68da8-ea14-11e4-e993-d630bf572fd0",
		"af2ee9e5-ec94-dc6f-1206-fe9f3aaf51b5"
	],
	"folders": [],
	"timestamp": 0,
	"public": false,
	"published": false,
	"favoriters": [
		{
			"id": "920496"
		}
	],
	"lastUpdatedBy": "920496",
	"lastRevision": 593138345,
	"team": "19881",
	"requests": [
		{
			"folder": null,
			"id": "03168e23-32a3-5c23-b0b1-b94bcfddcada",
			"name": "Move A File with Extra Body Properties copy",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "Move file with extra properties on request.",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/files/{{singleFile}}",
			"preRequestScript": "",
			"tests": "//getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//getting result body\r\nvar result = data.result;\r\n\r\n//reponse schema for get a single campaign\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"object\"\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\n//response schema for assets array\r\nvar resultSchema = {\r\n    \"type\": \"object\",\r\n    \"items\": {\r\n        \"type\": \"object\",\r\n        \"required\": [\"id\", \"name\", \"assetType\", \"parentId\", \"metadata\", \"creator\", \"associations\"],\r\n        \"properties\": {\r\n            \"id\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"name\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"assetType\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"parentId\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"metadata\": {\r\n                \"type\": [\"object\", \"null\"],\r\n                \"required\": [\"path\", \"fileType\", \"status\", \"fileSize\", \"resolution\"],\r\n                \"properties\": {\r\n                    \"path\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"fileType\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"status\": {\r\n                        \"type\": \"string\",\r\n                        \"enum\": [\"locked\", \"unlocked\"]\r\n                    },\r\n                    \"fileSize\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"resolution\": {\r\n                        \"type\": \"string\"\r\n                    }\r\n                }\r\n            },\r\n            \"creator\" : {\r\n                \"type\": [\"string\", \"null\"]\r\n            },\r\n            \"associations\" : {\r\n                \"type\": [\"array\", \"null\"],\r\n                \"items\" : {\r\n                    \"type\": \"string\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\ntests[\"Status code is 200\"] = responseCode.code === 200;\r\n\r\n//testing parentID being properly set\r\ntests[\"Parent ID Properly Set\"] = result.parentId === environment['orgSharedFolder'];\r\n\r\n//testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//testing result schema\r\ntests[\"Valid Result Array Schema\"] = tv4.validate(result, resultSchema);\r\n\r\n//logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504",
			"rawModeData": "{\n    \"newParentId\":\"{{orgSharedFolder}}\",\n    \"starWars\": \"Luke Skywalker\"\n}"
		},
		{ 
			"folder": null,
			"id": "0effa530-b115-969a-220a-55074d0ab1d1",
			"name": "Retrieve A Single Folder with Bad ID",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Retrieve a single folder but the requested folder is not found. Ensure proper response.",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/folders/8c3e67fa-9be6-4ad8-8396-a1a4fdea5677",
			"preRequestScript": "",
			"tests": "//getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//reponse schema for get a single campaign\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"array\"\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\ntests[\"Status code is 400\"] = responseCode.code === 400;\r\n\r\n//testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504"
		},
		{
			"id": "1f55b66d-2545-a2cb-0db6-ea962eb8c4c4",
			"folder": null,
			"name": "Create a second new folder",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "{\n    \"parentId\":\"{{singleFolder}}\",\n    \"name\":\"API Test Generated Folder {{$randomInt}}\"\n}",
			"descriptionFormat": null,
			"description": "Create a second new folder - this is used to be modified and deleted by other API tests.",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/folders",
			"preRequestScript": "",
			"tests": "//Getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//Getting response body\r\nvar result = data.result;\r\n\r\n//Setting parentFolder variable as Organization Shared Folder\r\npostman.setEnvironmentVariable(\"singleFolder2\", result.id);\r\n\r\n//Reponse schema\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"object\"\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\n//Result schema\r\nvar resultSchema = {\r\n \"type\": \"object\",\r\n \"required\": [\"id\", \"name\", \"assetType\", \"parentId\", \"creator\", \"associations\"],\r\n \"properties\": {\r\n            \"id\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"name\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"assetType\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"parentId\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"metadata\": {\r\n                \"type\": [\"object\", \"null\"],\r\n                \"required\": [\"path\", \"fileType\", \"status\", \"fileSize\", \"resolution\"],\r\n                \"properties\": {\r\n                    \"path\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"fileType\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"status\": {\r\n                        \"type\": \"string\",\r\n                        \"enum\": [\"locked\", \"unlocked\"]\r\n                    },\r\n                    \"fileSize\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"resolution\": {\r\n                        \"type\": \"string\"\r\n                    }\r\n                }\r\n            },\r\n            \"creator\" : {\r\n                \"type\": [\"string\", \"null\"]\r\n            },\r\n            \"associations\" : {\r\n                \"type\": [\"array\", \"null\"],\r\n                \"items\" : {\r\n                    \"type\": \"string\"\r\n                }\r\n            }\r\n        }\r\n};\r\n\r\ntests[\"Status code is 200\"] = responseCode.code === 200;\r\n\r\n//Testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//Testing result schema\r\ntests[\"Valid Result Schema\"] = tv4.validate(result, resultSchema);\r\n\r\n//Logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"responses": [],
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504"
		},
		{
			"folder": null,
			"id": "1ff15e3b-a890-16b9-2091-b32d618f716c",
			"name": "Create A New Folder with Bad Data",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "Create a new folder with bad data to verify expected response",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/folders",
			"preRequestScript": "",
			"tests": "//Getting response body\r\n//var data = JSON.parse(responseBody);\r\n\r\n//Getting response results\r\n//var result = data.result;\r\n\r\n//Reponse schema\r\n/*\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"array\"\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\",\r\n         \"items\" : {\r\n             \"type\": \"string\"\r\n         }\r\n     }\r\n }\r\n};\r\n*/\r\n\r\n//Result schema\r\n/*\r\nvar resultSchema = {\r\n \"type\": \"object\",\r\n \"required\": [\"id\", \"name\", \"assetType\", \"parentId\", \"creator\", \"associations\", \"created\"],\r\n \"properties\": {\r\n            \"id\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"name\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"assetType\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"parentId\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"metadata\": {\r\n                \"type\": [\"object\", \"null\"],\r\n                \"required\": [\"path\", \"fileType\", \"status\", \"fileSize\", \"resolution\"],\r\n                \"properties\": {\r\n                    \"path\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"fileType\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"status\": {\r\n                        \"type\": \"string\",\r\n                        \"enum\": [\"locked\", \"unlocked\"]\r\n                    },\r\n                    \"fileSize\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"resolution\": {\r\n                        \"type\": \"string\"\r\n                    }\r\n                }\r\n            },\r\n            \"creator\" : {\r\n                \"type\": [\"string\", \"null\"]\r\n            },\r\n            \"associations\" : {\r\n                \"type\": [\"array\", \"null\"],\r\n                \"items\" : {\r\n                    \"type\": \"string\"\r\n                }\r\n            }\r\n        }\r\n};\r\n*/\r\n\r\n//TODO(jcarter): This needs to be a 400 error with information on what went wrong.\r\ntests[\"Status code is 500\"] = responseCode.code === 500;\r\n\r\n//Testing response schema\r\n//TODO(jcarter): Re-implement when service is returning 400.\r\n//tests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//Logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504",
			"rawModeData": "{\n    \"parentId\":123456,\n    \"name\":false\n}"
		},
		{
			"id": "2aa51284-6f44-e819-564c-df240ef1ee2f",
			"folder": null,
			"name": "Retrieve A Single Folder",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Retrieve a single folder of specified ID.",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/folders/{{singleFolder}}",
			"preRequestScript": "",
			"tests": "//getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//reponse schema for get a single campaign\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"object\",\r\n         \"properties\": {\r\n             \"parentId\": {\r\n                 \"type\": \"string\"\r\n             },\r\n             \"assets\": {\r\n                 \"type\": \"array\"\r\n             }\r\n         }\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\ntests[\"Status code is 200\"] = responseCode.code === 200;\r\n\r\n//testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"responses": [],
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504"
		},
		{
			"id": "2e614269-b230-eb00-340b-65f334fc5079",
			"folder": null,
			"name": "Move A File",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "{\n    \"newParentId\":\"{{orgSharedFolder}}\"\n}",
			"descriptionFormat": null,
			"description": "Move file from one directory to another.",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/files/{{singleFile}}",
			"preRequestScript": "",
			"tests": "//getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//getting result body\r\nvar result = data.result;\r\n\r\n//reponse schema for get a single campaign\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"object\"\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\n//response schema for assets array\r\nvar resultSchema = {\r\n    \"type\": \"object\",\r\n    \"items\": {\r\n        \"type\": \"object\",\r\n        \"required\": [\"id\", \"name\", \"assetType\", \"parentId\", \"metadata\", \"creator\", \"associations\"],\r\n        \"properties\": {\r\n            \"id\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"name\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"assetType\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"parentId\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"metadata\": {\r\n                \"type\": [\"object\", \"null\"],\r\n                \"required\": [\"path\", \"fileType\", \"status\", \"fileSize\", \"resolution\"],\r\n                \"properties\": {\r\n                    \"path\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"fileType\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"status\": {\r\n                        \"type\": \"string\",\r\n                        \"enum\": [\"locked\", \"unlocked\"]\r\n                    },\r\n                    \"fileSize\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"resolution\": {\r\n                        \"type\": \"string\"\r\n                    }\r\n                }\r\n            },\r\n            \"creator\" : {\r\n                \"type\": [\"string\", \"null\"]\r\n            },\r\n            \"associations\" : {\r\n                \"type\": [\"array\", \"null\"],\r\n                \"items\" : {\r\n                    \"type\": \"string\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\ntests[\"Status code is 200\"] = responseCode.code === 200;\r\n\r\n//testing parentID being properly set\r\ntests[\"Parent ID Properly Set\"] = result.parentId === environment['orgSharedFolder'];\r\n\r\n//testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//testing result schema\r\ntests[\"Valid Result Array Schema\"] = tv4.validate(result, resultSchema);\r\n\r\n//logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"responses": [],
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504"
		},
		{
			"folder": null,
			"id": "3ba51c54-c6d9-e0f9-f981-e3ce030a0572",
			"name": "Retrieve A Single File with Bad ID",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Retrieve a single file that does not exist.",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/folders/8c3e67fa-9be6-4ad8-8396-a1a4fdea5677",
			"preRequestScript": "",
			"tests": "//getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n\r\n//reponse schema for get a single campaign\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"array\"\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\ntests[\"Status code is 400\"] = responseCode.code === 400;\r\n\r\n//testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504"
		},
		{
			"folder": null,
			"id": "426145ed-acf2-fa73-a8dc-d1ac8d9da14a",
			"name": "Move A File with Missing Body Properties",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "Move file with missing properties to ensure correct response.",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/files/{{singleFile}}",
			"preRequestScript": "",
			"tests": "//getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//getting result body\r\nvar result = data.result;\r\n\r\n//reponse schema for get a single campaign\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"array\"\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\ntests[\"Status code is 400\"] = responseCode.code === 400;\r\n\r\n//testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504",
			"rawModeData": "{\n  \"hello\": \"World\"\n}"
		},
		{
			"id": "4370d0c4-6f62-f32a-bf61-3b5dbb88864c",
			"folder": null,
			"name": "Edit A Single File",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "{\n    \"name\": \"Name_Edited_In_API_Test.png\"\n}",
			"descriptionFormat": null,
			"description": "Edit the name and properties on a single file.",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "PUT",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/files/{{singleFile}}",
			"preRequestScript": "",
			"tests": "//getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//getting response body\r\nvar result = data.result;\r\n\r\n//reponse schema for get a single campaign\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"object\"\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\n//result schema\r\nvar resultSchema = {\r\n    \"type\": \"object\",\r\n    \"required\": [\"id\", \"name\", \"assetType\", \"parentId\", \"metadata\", \"creator\", \"associations\"],\r\n    \"properties\": {\r\n        \"id\" : {\r\n            \"type\": \"string\"\r\n        },\r\n        \"name\" : {\r\n            \"type\": \"string\"\r\n        },\r\n        \"assetType\" : {\r\n            \"type\": \"string\"\r\n        },\r\n        \"parentId\" : {\r\n            \"type\": \"string\"\r\n        },\r\n        \"metadata\": {\r\n            \"type\": [\"object\", \"null\"],\r\n            \"required\": [\"path\", \"fileType\", \"status\", \"fileSize\", \"resolution\"],\r\n            \"properties\": {\r\n                \"path\": {\r\n                    \"type\": \"string\"\r\n                },\r\n                \"fileType\": {\r\n                    \"type\": \"string\"\r\n                },\r\n                \"status\": {\r\n                    \"type\": \"string\",\r\n                    \"enum\": [\"locked\", \"unlocked\"]\r\n                },\r\n                \"fileSize\": {\r\n                    \"type\": \"string\"\r\n                },\r\n                \"resolution\": {\r\n                    \"type\": \"string\"\r\n                }\r\n            }\r\n        },\r\n        \"creator\" : {\r\n            \"type\": [\"string\", \"null\"]\r\n        },\r\n        \"associations\" : {\r\n            \"type\": [\"array\", \"null\"],\r\n            \"items\" : {\r\n                \"type\": \"string\"\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\ntests[\"Status code is 200\"] = responseCode.code === 200;\r\n\r\n//testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//testing result schema\r\ntests[\"Valid Result Schema\"] = tv4.validate(result, resultSchema);\r\n\r\n//testing that name was changed\r\ntests[\"Checking that name was correctly changed\"] = result.name = \"Name_Edited_In_API_Test.png\";\r\n\r\n//logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"responses": [],
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504"
		},
		{
			"id": "48e68da8-ea14-11e4-e993-d630bf572fd0",
			"folder": null,
			"name": "Delete A Folder",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "Deleting a folder will remove it from the database.",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/folders/{{singleFolder2}}",
			"preRequestScript": "",
			"tests": "//getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//getting result body\r\nvar result = data.result;\r\n\r\n//reponse schema for get a single campaign\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"object\"\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\n//response schema for assets array\r\nvar resultSchema = {\r\n    \"type\": \"object\",\r\n    \"items\": {\r\n        \"type\": \"object\",\r\n        \"required\": [\"assetId\"],\r\n        \"properties\": {\r\n            \"assetId\" : {\r\n                \"type\": \"string\"\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\ntests[\"Status code is 200\"] = responseCode.code === 200;\r\n\r\n\r\n//testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//testing result schema\r\ntests[\"Valid Result Schema\"] = tv4.validate(result, resultSchema);\r\n\r\n//logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"responses": [],
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504"
		},
		{
			"folder": null,
			"id": "5d5c05e8-d015-9649-f5b4-2b0fe515b333",
			"name": "Create A New Folder with Missing Properties",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "Create a new folder with missing properties to verify expected response",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/folders",
			"preRequestScript": "",
			"tests": "//Getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//Getting response results\r\nvar result = data.result;\r\n\r\n//Reponse schema\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"array\"\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\",\r\n         \"items\" : {\r\n             \"type\": \"string\"\r\n         }\r\n     }\r\n }\r\n};\r\n\r\n//Result schema\r\nvar resultSchema = {\r\n \"type\": \"object\",\r\n \"required\": [\"id\", \"name\", \"assetType\", \"parentId\", \"creator\", \"associations\", \"created\"],\r\n \"properties\": {\r\n            \"id\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"name\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"assetType\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"parentId\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"metadata\": {\r\n                \"type\": [\"object\", \"null\"],\r\n                \"required\": [\"path\", \"fileType\", \"status\", \"fileSize\", \"resolution\"],\r\n                \"properties\": {\r\n                    \"path\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"fileType\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"status\": {\r\n                        \"type\": \"string\",\r\n                        \"enum\": [\"locked\", \"unlocked\"]\r\n                    },\r\n                    \"fileSize\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"resolution\": {\r\n                        \"type\": \"string\"\r\n                    }\r\n                }\r\n            },\r\n            \"creator\" : {\r\n                \"type\": [\"string\", \"null\"]\r\n            },\r\n            \"associations\" : {\r\n                \"type\": [\"array\", \"null\"],\r\n                \"items\" : {\r\n                    \"type\": \"string\"\r\n                }\r\n            }\r\n        }\r\n};\r\n\r\ntests[\"Status code is 400\"] = responseCode.code === 400;\r\n\r\n//Testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//Logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504",
			"rawModeData": "{\n    \"name\":\"API Test Generated Folder {{$randomInt}}\"\n}"
		},
		{
			"id": "61a3ad3a-37ba-ca6e-9faa-345efb4943f2",
			"folder": null,
			"name": "Retrieve Root Folder",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Retrieve the organizations root folder, \"Organization Shared Folder\"",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/folders/root",
			"preRequestScript": "",
			"tests": "//Getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//Getting response body\r\nvar assets = data.result.assets;\r\n\r\n//reponse schema for get a single campaign\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"object\",\r\n         \"properties\": {\r\n             \"assets\": {\r\n                 \"type\": \"array\"\r\n             }\r\n         }\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\n//response schema for assets array\r\nvar assetsArraySchema = {\r\n    \"type\": \"array\",\r\n    \"items\": {\r\n        \"type\": \"object\",\r\n        \"required\": [\"id\", \"name\", \"assetType\", \"parentId\", \"metadata\", \"creator\", \"associations\"],\r\n        \"properties\": {\r\n            \"id\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"name\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"assetType\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"parentId\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"metadata\": {\r\n                \"type\": [\"object\", \"null\"],\r\n                \"required\": [\"path\", \"fileType\", \"status\", \"fileSize\", \"resolution\"],\r\n                \"properties\": {\r\n                    \"path\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"fileType\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"status\": {\r\n                        \"type\": \"string\",\r\n                        \"enum\": [\"locked\", \"unlocked\"]\r\n                    },\r\n                    \"fileSize\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"resolution\": {\r\n                        \"type\": \"string\"\r\n                    }\r\n                }\r\n            },\r\n            \"creator\" : {\r\n                \"type\": [\"string\", \"null\"]\r\n            },\r\n            \"associations\" : {\r\n                \"type\": [\"array\", \"null\"],\r\n                \"items\" : {\r\n                    \"type\": \"string\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nvar directoryCount = 0;\r\nfor (var result in assets) {\r\n    if (assets[result].assetType === \"Directory\") {\r\n        directoryCount++;\r\n    }\r\n}\r\n\r\ntests[\"Status code is 200\"] = responseCode.code === 200;\r\n\r\n//Testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//Testing result assets schema\r\ntests[\"Valid Asset Array Schema\"] = tv4.validate(assets, assetsArraySchema);\r\n\r\n//Testing that only one root is returned.\r\ntests[\"Only One Root Returned\"] = directoryCount === 1;\r\n\r\n//Logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"responses": [],
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504"
		},
		{
			"id": "6b666258-cc37-84cc-f364-0754ef1ed900",
			"folder": null,
			"name": "Edit A Single Folder",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "{\n    \"name\": \"Name_Edited_In_API_Test.png\"\n}",
			"descriptionFormat": null,
			"description": "Edit a single folder to change properties and attributes",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "PUT",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/folders/{{singleFolder}}",
			"preRequestScript": "",
			"tests": "//getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//getting response body\r\nvar result = data.result;\r\n\r\n//reponse schema for get a single campaign\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"object\"\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\n//result schema\r\nvar resultSchema = {\r\n    \"type\": \"object\",\r\n    \"required\": [\"id\", \"name\", \"assetType\", \"parentId\", \"metadata\", \"creator\", \"associations\"],\r\n    \"properties\": {\r\n        \"id\" : {\r\n            \"type\": \"string\"\r\n        },\r\n        \"name\" : {\r\n            \"type\": \"string\"\r\n        },\r\n        \"assetType\" : {\r\n            \"type\": \"string\"\r\n        },\r\n        \"parentId\" : {\r\n            \"type\": \"string\"\r\n        },\r\n        \"metadata\": {\r\n            \"type\": [\"object\", \"null\"],\r\n            \"required\": [\"path\", \"fileType\", \"status\", \"fileSize\", \"resolution\"],\r\n            \"properties\": {\r\n                \"path\": {\r\n                    \"type\": \"string\"\r\n                },\r\n                \"fileType\": {\r\n                    \"type\": \"string\"\r\n                },\r\n                \"status\": {\r\n                    \"type\": \"string\",\r\n                    \"enum\": [\"locked\", \"unlocked\"]\r\n                },\r\n                \"fileSize\": {\r\n                    \"type\": \"string\"\r\n                },\r\n                \"resolution\": {\r\n                    \"type\": \"string\"\r\n                }\r\n            }\r\n        },\r\n        \"creator\" : {\r\n            \"type\": [\"string\", \"null\"]\r\n        },\r\n        \"associations\" : {\r\n            \"type\": [\"array\", \"null\"],\r\n            \"items\" : {\r\n                \"type\": \"string\"\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\ntests[\"Status code is 200\"] = responseCode.code === 200;\r\n\r\n//testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//testing result schema\r\ntests[\"Valid Result Schema\"] = tv4.validate(result, resultSchema);\r\n\r\n//testing that name was changed\r\ntests[\"Checking that name was correctly changed\"] = result.name = \"Name_Edited_In_API_Test.png\";\r\n\r\n//logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"responses": [],
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504"
		},
		{
			"folder": null,
			"id": "71ee918b-9cbf-0541-3d98-22e5d1c5e657",
			"name": "Move A Folder with Missing Properties in Request",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "Moving a folder with missing properties in request should return expectd status.",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/folders/{{singleFolder2}}",
			"preRequestScript": "",
			"tests": "//getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//reponse schema for get a single campaign\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"array\"\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\ntests[\"Status code is 400\"] = responseCode.code === 400;\r\n\r\n//testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504",
			"rawModeData": "{\n    \"starWars\": \"Luke Skywalker\"\n}"
		},
		{
			"id": "7242ad41-bd6a-c277-1a74-6bd57ba2665c",
			"folder": null,
			"name": "Create A New Folder",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "{\n    \"parentId\":\"{{orgSharedFolder}}\",\n    \"name\":\"API Test Generated Folder {{$randomInt}}\"\n}",
			"descriptionFormat": null,
			"description": "Create A New Folder For User and Their Organization.",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/folders",
			"preRequestScript": "",
			"tests": "//Getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//Getting response results\r\nvar result = data.result;\r\n\r\n//Setting parentFolder variable as Organization Shared Folder\r\npostman.setEnvironmentVariable(\"singleFolder\", result.id);\r\n\r\n//Reponse schema\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"object\"\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\n//Result schema\r\nvar resultSchema = {\r\n \"type\": \"object\",\r\n \"required\": [\"id\", \"name\", \"assetType\", \"parentId\", \"creator\", \"associations\", \"created\"],\r\n \"properties\": {\r\n            \"id\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"name\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"assetType\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"parentId\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"metadata\": {\r\n                \"type\": [\"object\", \"null\"],\r\n                \"required\": [\"path\", \"fileType\", \"status\", \"fileSize\", \"resolution\"],\r\n                \"properties\": {\r\n                    \"path\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"fileType\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"status\": {\r\n                        \"type\": \"string\",\r\n                        \"enum\": [\"locked\", \"unlocked\"]\r\n                    },\r\n                    \"fileSize\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"resolution\": {\r\n                        \"type\": \"string\"\r\n                    }\r\n                }\r\n            },\r\n            \"creator\" : {\r\n                \"type\": [\"string\", \"null\"]\r\n            },\r\n            \"associations\" : {\r\n                \"type\": [\"array\", \"null\"],\r\n                \"items\" : {\r\n                    \"type\": \"string\"\r\n                }\r\n            }\r\n        }\r\n};\r\n\r\ntests[\"Status code is 200\"] = responseCode.code === 200;\r\n\r\n//Testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//Testing result schema\r\ntests[\"Valid Result Schema\"] = tv4.validate(result, resultSchema);\r\n\r\n//Logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"responses": [],
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504"
		},
		{
			"folder": null,
			"id": "737dedb8-bbd5-6218-7b55-2b97763dda1e",
			"name": "Retrieve All Folders with Bad Params",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Retrieve all folders a user has access too in regards to their current Organization, passing in bad params to confirm response for that scenario.",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/folders?Hello=World&Fizz=Buzz&take=Integrate&alpha=Omega",
			"preRequestScript": "",
			"tests": "//Getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//Getting response body\r\nvar assets = data.result.assets;\r\n\r\nfor (var asset in assets) {\r\n    //Setting parentFolder variable as Organization Shared Folder\r\n    if (assets[asset].name === \"Organizations Shared Folder\") {\r\n        postman.setEnvironmentVariable(\"orgSharedFolder\", assets[asset].id);\r\n    }\r\n}\r\n\r\n//reponse schema for get a single campaign\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"required\": [\"result\", \"errors\"],\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"object\",\r\n         \"required\": [\"parentId\", \"assets\"],\r\n         \"properties\": {\r\n             \"parentId\": {\r\n                 \"type\": \"string\"\r\n             },\r\n             \"assets\": {\r\n                 \"type\": \"array\"\r\n             }\r\n         }\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\n//response schema for assets array\r\nvar assetsArraySchema = {\r\n    \"type\": \"array\",\r\n    \"items\": {\r\n        \"type\": \"object\",\r\n        \"required\": [\"id\", \"name\", \"assetType\", \"parentId\", \"metadata\", \"creator\", \"associations\", \"created\"],\r\n        \"properties\": {\r\n            \"id\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"name\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"assetType\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"parentId\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"metadata\": {\r\n                \"type\": [\"object\", \"null\"],\r\n                \"required\": [\"path\", \"fileType\", \"status\", \"fileSize\", \"resolution\"],\r\n                \"properties\": {\r\n                    \"path\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"fileType\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"status\": {\r\n                        \"type\": \"string\",\r\n                        \"enum\": [\"locked\", \"unlocked\"]\r\n                    },\r\n                    \"fileSize\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"resolution\": {\r\n                        \"type\": \"string\"\r\n                    }\r\n                }\r\n            },\r\n            \"creator\" : {\r\n                \"type\": [\"string\", \"null\"]\r\n            },\r\n            \"associations\" : {\r\n                \"type\": [\"array\", \"null\"],\r\n                \"items\" : {\r\n                    \"type\": \"string\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\ntests[\"Status code is 200\"] = responseCode.code === 200;\r\n\r\n//Testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//Testing assets array schema\r\ntests[\"Valid Asset Array Schema\"] = tv4.validate(assets, assetsArraySchema);\r\n\r\n//Logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504"
		},
		{
			"folder": null,
			"id": "890e4a4c-a845-0c0f-7950-ab7c350d91d0",
			"name": "Upload A File with Missing Header",
			"dataMode": "params",
			"data": [
				{
					"key": "myFile",
					"value": "test-upload.png",
					"type": "file",
					"enabled": true
				}
			],
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Upload a file with a missing required header.",
			"headers": "Authorization: dev|{{singleUser}}\n",
			"method": "POST",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/files",
			"preRequestScript": "",
			"tests": "//getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//getting result\r\nvar result = data.result;\r\n\r\n//reponse schema\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"array\"\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\ntests[\"Status code is 400\"] = responseCode.code === 400;\r\n\r\n//testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504"
		},
		{
			"folder": null,
			"id": "af2ee9e5-ec94-dc6f-1206-fe9f3aaf51b5",
			"name": "Delete A File",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "",
			"descriptionFormat": null,
			"description": "Deleting a file will remove it from the database.",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "DELETE",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/folders/{{singleFile2}}",
			"preRequestScript": "",
			"tests": "//getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//getting result body\r\nvar result = data.result;\r\n\r\n//reponse schema for get a single campaign\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"object\"\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\n//response schema for assets array\r\nvar resultSchema = {\r\n    \"type\": \"object\",\r\n    \"items\": {\r\n        \"type\": \"object\",\r\n        \"required\": [\"assetId\"],\r\n        \"properties\": {\r\n            \"assetId\" : {\r\n                \"type\": \"string\"\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\ntests[\"Status code is 200\"] = responseCode.code === 200;\r\n\r\n\r\n//testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//testing result schema\r\ntests[\"Valid Result Schema\"] = tv4.validate(result, resultSchema);\r\n\r\n//logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504"
		},
		{
			"id": "b7774e77-5900-75f9-acf6-2c77a3a9d70a",
			"folder": null,
			"name": "Retrieve A Single File",
			"dataMode": "params",
			"data": [],
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Retrieve a single file.",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "GET",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/folders/{{singleFolder}}",
			"preRequestScript": "",
			"tests": "//getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//getting response body\r\nvar assets = data.result.assets;\r\n\r\n//reponse schema for get a single campaign\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"object\",\r\n         \"properties\": {\r\n             \"parentId\": {\r\n                 \"type\": \"string\"\r\n             },\r\n             \"assets\": {\r\n                 \"type\": \"array\"\r\n             }\r\n         }\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\n//response schema for assets array\r\nvar assetsArraySchema = {\r\n    \"type\": \"array\",\r\n    \"items\": {\r\n        \"type\": \"object\",\r\n        \"required\": [\"id\", \"name\", \"assetType\", \"parentId\", \"metadata\", \"creator\", \"associations\"],\r\n        \"properties\": {\r\n            \"id\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"name\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"assetType\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"parentId\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"metadata\": {\r\n                \"type\": [\"object\", \"null\"],\r\n                \"required\": [\"path\", \"fileType\", \"status\", \"fileSize\", \"resolution\"],\r\n                \"properties\": {\r\n                    \"path\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"fileType\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"status\": {\r\n                        \"type\": \"string\",\r\n                        \"enum\": [\"locked\", \"unlocked\"]\r\n                    },\r\n                    \"fileSize\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"resolution\": {\r\n                        \"type\": \"string\"\r\n                    }\r\n                }\r\n            },\r\n            \"creator\" : {\r\n                \"type\": [\"string\", \"null\"]\r\n            },\r\n            \"associations\" : {\r\n                \"type\": [\"array\", \"null\"],\r\n                \"items\" : {\r\n                    \"type\": \"string\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\ntests[\"Status code is 200\"] = responseCode.code === 200;\r\n\r\n//testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//testing campaign object schema\r\ntests[\"Valid Asset Array Schema\"] = tv4.validate(assets, assetsArraySchema);\r\n\r\n//logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"responses": [],
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504"
		},
		{
			"id": "c9238d75-4852-564c-aa16-8236de9fa153",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/folders?query=&skip=0&take=10&sortBy=Name&isAscending=true",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "//Getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//Getting response body\r\nvar assets = data.result.assets;\r\n\r\nfor (var asset in assets) {\r\n    //Setting parentFolder variable as Organization Shared Folder\r\n    if (assets[asset].name === \"Organizations Shared Folder\") {\r\n        postman.setEnvironmentVariable(\"orgSharedFolder\", assets[asset].id);\r\n    }\r\n}\r\n\r\n//reponse schema for get a single campaign\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"object\",\r\n         \"properties\": {\r\n             \"parentId\": {\r\n                 \"type\": \"string\"\r\n             },\r\n             \"assets\": {\r\n                 \"type\": \"array\"\r\n             }\r\n         }\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\n//response schema for assets array\r\nvar assetsArraySchema = {\r\n    \"type\": \"array\",\r\n    \"items\": {\r\n        \"type\": \"object\",\r\n        \"required\": [\"id\", \"name\", \"assetType\", \"parentId\", \"metadata\", \"creator\", \"associations\"],\r\n        \"properties\": {\r\n            \"id\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"name\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"assetType\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"parentId\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"metadata\": {\r\n                \"type\": [\"object\", \"null\"],\r\n                \"required\": [\"path\", \"fileType\", \"status\", \"fileSize\", \"resolution\"],\r\n                \"properties\": {\r\n                    \"path\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"fileType\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"status\": {\r\n                        \"type\": \"string\",\r\n                        \"enum\": [\"locked\", \"unlocked\"]\r\n                    },\r\n                    \"fileSize\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"resolution\": {\r\n                        \"type\": \"string\"\r\n                    }\r\n                }\r\n            },\r\n            \"creator\" : {\r\n                \"type\": [\"string\", \"null\"]\r\n            },\r\n            \"associations\" : {\r\n                \"type\": [\"array\", \"null\"],\r\n                \"items\" : {\r\n                    \"type\": \"string\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\ntests[\"Status code is 200\"] = responseCode.code === 200;\r\n\r\n//Testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//Testing campaign object schema\r\ntests[\"Valid Asset Array Schema\"] = tv4.validate(assets, assetsArraySchema);\r\n\r\n//Logging schema errors\r\nconsole.log('error ', tv4.error);\r\n\r\nmodule.export = {\r\n    reponseSchema: responseSchema\r\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1475075134593,
			"name": "Retrieve All Folders",
			"description": "Retrieve all folders a user has access too in regards to their current Organization.",
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504",
			"responses": []
		},
		{
			"id": "d09377f4-89d9-e373-4130-a6d4719615f0",
			"folder": null,
			"name": "Upload A File",
			"dataMode": "params",
			"data": [
				{
					"key": "myFile",
					"value": "field-design.jpg",
					"type": "file",
					"enabled": true
				}
			],
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Upload a file",
			"headers": "Authorization: dev|{{singleUser}}\nX-Parent-Id: {{singleFolder}}\n",
			"method": "POST",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/files",
			"preRequestScript": "",
			"tests": "//getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//getting result\r\nvar result = data.result;\r\n\r\n//Setting singleFile variable\r\npostman.setEnvironmentVariable(\"singleFile\", result.id);\r\n\r\n//reponse schema\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"object\"\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\n//result schema\r\nvar resultSchema = {\r\n     \"type\": \"object\",\r\n        \"required\": [\"id\", \"name\", \"assetType\", \"parentId\", \"metadata\", \"creator\", \"associations\"],\r\n        \"properties\": {\r\n            \"id\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"name\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"assetType\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"parentId\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"metadata\": {\r\n                \"type\": [\"object\", \"null\"],\r\n                \"required\": [\"path\", \"fileType\", \"status\", \"fileSize\", \"resolution\"],\r\n                \"properties\": {\r\n                    \"path\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"fileType\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"status\": {\r\n                        \"type\": \"string\",\r\n                        \"enum\": [\"locked\", \"unlocked\"]\r\n                    },\r\n                    \"fileSize\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"resolution\": {\r\n                        \"type\": \"string\"\r\n                    }\r\n                }\r\n            },\r\n            \"creator\" : {\r\n                \"type\": [\"string\", \"null\"]\r\n            },\r\n            \"associations\" : {\r\n                \"type\": [\"array\", \"null\"],\r\n                \"items\" : {\r\n                    \"type\": \"string\"\r\n                }\r\n            }\r\n        }\r\n}\r\n\r\ntests[\"Status code is 200\"] = responseCode.code === 200;\r\n\r\n//testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//testing result schema\r\ntests[\"Valid Result Schema\"] = tv4.validate(result, resultSchema);\r\n\r\n//logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"responses": [],
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504"
		},
		{
			"folder": null,
			"id": "e829b3ac-78e7-2ba2-79ea-ea4a51d04564",
			"name": "Move A Folder with Bad Data in Request",
			"dataMode": "raw",
			"data": [],
			"descriptionFormat": null,
			"description": "Move a folder with bad data in request should return expected status code.",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/folders/{{singleFolder2}}",
			"preRequestScript": "",
			"tests": "tests[\"Status code is 500\"] = responseCode.code === 500;\r\n\r\n//logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504",
			"rawModeData": "{\n    \"newParentId\":123456\n}"
		},
		{
			"folder": null,
			"id": "f17b3859-91ad-bb97-a1ac-1500a41dcf7a",
			"name": "Upload A File To Be Deleted Later",
			"dataMode": "params",
			"data": [
				{
					"key": "myFile",
					"value": "test-upload.png",
					"type": "file",
					"enabled": true
				}
			],
			"rawModeData": null,
			"descriptionFormat": null,
			"description": "Upload a file to be deleted later by other API tests.",
			"headers": "Authorization: dev|{{singleUser}}\nX-Parent-Id: {{singleFolder}}\n",
			"method": "POST",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/files",
			"preRequestScript": "",
			"tests": "//getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//getting result\r\nvar result = data.result;\r\n\r\n//Setting singleFile variable\r\npostman.setEnvironmentVariable(\"singleFile2\", result.id);\r\n\r\n//reponse schema\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"object\"\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\n//result schema\r\nvar resultSchema = {\r\n     \"type\": \"object\",\r\n        \"required\": [\"id\", \"name\", \"assetType\", \"parentId\", \"metadata\", \"creator\", \"associations\"],\r\n        \"properties\": {\r\n            \"id\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"name\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"assetType\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"parentId\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"metadata\": {\r\n                \"type\": [\"object\", \"null\"],\r\n                \"required\": [\"path\", \"fileType\", \"status\", \"fileSize\", \"resolution\"],\r\n                \"properties\": {\r\n                    \"path\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"fileType\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"status\": {\r\n                        \"type\": \"string\",\r\n                        \"enum\": [\"locked\", \"unlocked\"]\r\n                    },\r\n                    \"fileSize\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"resolution\": {\r\n                        \"type\": \"string\"\r\n                    }\r\n                }\r\n            },\r\n            \"creator\" : {\r\n                \"type\": [\"string\", \"null\"]\r\n            },\r\n            \"associations\" : {\r\n                \"type\": [\"array\", \"null\"],\r\n                \"items\" : {\r\n                    \"type\": \"string\"\r\n                }\r\n            }\r\n        }\r\n}\r\n\r\ntests[\"Status code is 200\"] = responseCode.code === 200;\r\n\r\n//testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//testing result schema\r\ntests[\"Valid Result Schema\"] = tv4.validate(result, resultSchema);\r\n\r\n//logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504"
		},
		{
			"id": "ff7f4e5a-dfa3-db2b-1b50-4a1796e1ff95",
			"folder": null,
			"name": "Move A Folder",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "{\n    \"newParentId\":\"{{singleFolder}}\"\n}",
			"descriptionFormat": null,
			"description": "Move a folder so that it has a new parent.",
			"headers": "Authorization: dev|{{singleUser}}\nContent-Type: application/json\n",
			"method": "POST",
			"pathVariables": {},
			"url": "{{baseUrl}}/api/organizations/{{singleOrg}}/folders/{{singleFolder2}}",
			"preRequestScript": "",
			"tests": "//getting response body\r\nvar data = JSON.parse(responseBody);\r\n\r\n//getting result body\r\nvar result = data.result;\r\n\r\n//reponse schema for get a single campaign\r\nvar responseSchema = {\r\n \"type\": \"object\",\r\n \"properties\": {\r\n     \"result\" : {\r\n         \"type\": \"object\"\r\n     },\r\n     \"errors\": {\r\n         \"type\": \"array\"\r\n     }\r\n }\r\n};\r\n\r\n//response schema for assets array\r\nvar resultSchema = {\r\n    \"type\": \"object\",\r\n    \"items\": {\r\n        \"type\": \"object\",\r\n        \"required\": [\"id\", \"name\", \"assetType\", \"parentId\", \"metadata\", \"creator\", \"associations\"],\r\n        \"properties\": {\r\n            \"id\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"name\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"assetType\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"parentId\" : {\r\n                \"type\": \"string\"\r\n            },\r\n            \"metadata\": {\r\n                \"type\": [\"object\", \"null\"],\r\n                \"required\": [\"path\", \"fileType\", \"status\", \"fileSize\", \"resolution\"],\r\n                \"properties\": {\r\n                    \"path\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"fileType\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"status\": {\r\n                        \"type\": \"string\",\r\n                        \"enum\": [\"locked\", \"unlocked\"]\r\n                    },\r\n                    \"fileSize\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"resolution\": {\r\n                        \"type\": \"string\"\r\n                    }\r\n                }\r\n            },\r\n            \"creator\" : {\r\n                \"type\": [\"string\", \"null\"]\r\n            },\r\n            \"associations\" : {\r\n                \"type\": [\"array\", \"null\"],\r\n                \"items\" : {\r\n                    \"type\": \"string\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\ntests[\"Status code is 200\"] = responseCode.code === 200;\r\n\r\n//testing parentID being properly set\r\ntests[\"Parent ID Properly Set\"] = result.parentId === environment['singleFolder'];\r\n\r\n//testing response schema\r\ntests[\"Valid Response Schema\"] = tv4.validate(data, responseSchema);\r\n\r\n//testing result schema\r\ntests[\"Valid Result Array Schema\"] = tv4.validate(result, resultSchema);\r\n\r\n//logging schema errors\r\nconsole.log('error ', tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"responses": [],
			"collectionId": "0d314be7-6067-c3ff-34a7-02adbd79a504"
		}
	]
}